user www-data; # 设置worker 运行账户
worker_processes 4;
pid /run/nginx.pid;
# 等于进程可打开的最大文件数, 同时要配置/etc/default/nginx中的ulimit 755114
worker_rlimit_nofile 755114;
# for rtmp module
rtmp_auto_push on;


#error_log logs/error.log debug;
events {
    # worker的并发处理连接数，内存允许，可配足够大，小于进程可打开最大文件数即可
	worker_connections 111768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on; # for static files
	tcp_nopush on; # tcp 选项
	tcp_nodelay on; # tcp 选项
	keepalive_timeout 65;
	types_hash_max_size 2048;
    client_max_body_size 500m; # 影响最大文件上传限制
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /opt/nginx/conf/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings, 标准日志格式
	##
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '"$status" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" '
        '"$gzip_ratio" $request_time $bytes_sent $request_length';

	access_log /var/log/nginx/access.log main; #表示继承标准格式
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on; #开启输出gzip优化
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;
	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##
    

	include /opt/nginx/conf/conf.d/*.conf;
	include /opt/nginx/conf/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
rtmp {

    server {

        listen 1935;

        chunk_size 4096;
        ping 5s;
        notify_method get;

	# Many publishers, many subscribers
       
        application drsoon {

            live on;
	    record audio;
	    #record_append on;
	    record_path /tmp/rec;
            record_suffix .flv;
            drop_idle_publisher 10s;

            # The following notifications receive all 
            # the session variables as well as 
            # particular call arguments in HTTP POST
            # request

            # Make HTTP request & use HTTP retcode
            # to decide whether to allow publishing
            # from this connection or not
            on_publish http://localhost:80/publish;

            # Same with playing
            on_play http://localhost:80/play;

            # Publish/play end (repeats on disconnect)
            #on_done http://localhost:80/done;

            # All above mentioned notifications receive
            # standard connect() arguments as well as 
            # play/publish ones. If any arguments are sent
            # with GET-style syntax to play & publish
            # these are also included.
            # Example URL:
            #   rtmp://localhost/myapp/mystream?a=b&c=d


            # Async notify about an flv recorded
            on_record_done http://localhost:80/record_done;

        }
    }

}

